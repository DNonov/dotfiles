#! /bin/bash

# Prevent silent errors.
set -e

# Terminal colors.
Red="\033[0;31m";
Green="\033[0;32m";
White="\033[1;37m";

package="react-component";
input_path=$2;

# Get component and dir name
dir=`dirname "$input_path"`;
component_name=`echo $input_path | sed -e 's/^.*\///'`;

# Check if this file already exist.
if [ -e "$input_path.jsx" ]; then
  rm "$input_path.jsx";
  rm "$input_path.test.js";
  rm "$input_path.css";
  rm "$dir/index.js";
fi

# Check number of params
if [ $# -gt 0 ]; then
  # Check for flags
  while test $# -gt 0; do
    case "$1" in
      -h|--help)
        echo "$package - scaffolds a react component";
        echo " ";
        echo "$package [options] path";
        echo " ";
        echo "options:";
        echo "-h, --help                show brief help";
        echo "-f, --functional          scaffolds a functional react component";
        echo "-c, --class-based         scaffolds a class based react component";
        echo ""
        echo -e "${Green}Example:"
        echo -e "${White}$package -f ./home/View"
        echo -e "${Green}Result:"
        echo -e "${White}./home"
        echo -e "├── View.css"
        echo -e "├── View.jsx"
        echo -e "└── View.test.js"
        exit 0;
        ;;
      -f|--functional)
        shift;
        if test $# -gt 0; then
          component_type="functional";
        else
          echo -e "${Red} Missing path to the component.";
          echo -e "${Red} Try ${White}$package --help";
        fi
        shift;
        ;;
      -c|--class-based)
        shift;
        if test $# -gt 0; then
          component_type="class-based";
        else
          echo -e "${Red} Missing path to the component.";
          echo -e "${Red} Try ${White}$package --help";
        fi
        shift;
        ;;
      *)
        component_type="functional";
        input_path=$1
        break;
        ;;
    esac
  done

  # Create all dirs and files required.
  mkdir -p $dir && touch $input_path{.jsx,.css,.test.js};
  touch "$dir/index.js"


  # React class based component's content.
  class_based=(
    "import React, {Component} from 'react';"
    "import PropTypes from 'prop-types';"
    "import './${component_name^}.css';"
    ""
    "class ${component_name^} extends Component {"
    "  constructor(props) {"
    "    super(props);"
    "  }"
    ""
    "  render() {"
    "    return();"
    "  }"
    "}"
    ""
    "${component_name^}.propTypes = {};"
    ""
    "export default ${component_name^};"
  )

  # React functional component's content.
  functional=(
    "import React from 'react';"
    "import PropTypes from 'prop-types';"
    "import './${component_name^}.css';"
    ""
    "function ${component_name^}() {"
    "  return();"
    "}"
    ""
    "${component_name^}.propTypes = {};"
    ""
    "export default ${component_name^};"
  )

  index_content="export {default} from './${component_name^}';";

  # Generate file's content.
  if [ "$component_type" == "functional" ]; then
    for row in "${functional[@]}"; do
      echo "$row" >> "$input_path.jsx"
    done
  else
    for row in "${class_based[@]}"; do
      echo "$row" >> "$input_path.jsx"
    done
  fi

  echo $index_content >> "$dir/index.js";

  echo -e "${Green} ${component_name^} component has been created.";
else
  echo -e "${Red} Missing path to the component.";
  echo -e "${Red} Try ${White}$package --help";
fi